Index: vardefs.php
===================================================================
--- vardefs.php	(revision 3)
+++ vardefs.php	(working copy)
@@ -1,7 +1,6 @@
 <?
 
 $config_file = "config.php";
-$database_file = "bocce.db";
 $schema_file = "dbschema.sql";
 
 require($config_file);
Index: statistics.php
===================================================================
--- statistics.php	(revision 3)
+++ statistics.php	(working copy)
@@ -1,4 +1,24 @@
 <?
+/*
+ * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
+ *
+ *This program is free software; you can redistribute it and/or modify
+ *it under the terms of the GNU General Public License as published by
+ *the Free Software Foundation; either version 2 of the License, or
+ *(at your option) any later version.
+ *
+ *This program is distributed in the hope that it will be useful,
+ *but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *GNU General Public License for more details.
+ *
+ *You should have received a copy of the GNU General Public License
+ *along with this program; if not, write to the Free Software
+ *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+require("db.php");
 require("boccelib.php");
 require("statslib.php");
 require("header.php");
@@ -24,40 +44,40 @@
 </tr>
 <?
 
-$db = sqlite_open($database_file);
+db_open();
 
-foreach (all_players($db) as $player) {
+foreach (all_players() as $player) {
   print "<tr>";
 
   print "<th><a href=\"personal.php?id=$player\">";
-  print player_name($db, $player)."</a></th>\n";
+  print player_name($player)."</a></th>\n";
 
-  print "<td>".player_total_wins($db, $player)."&nbsp;-&nbsp;";
-  print player_total_losses($db, $player)."</td>\n";
+  print "<td>".player_total_wins($player)."&nbsp;-&nbsp;";
+  print player_total_losses($player)."</td>\n";
 
-  print "<td>".format_percent(player_overall_win_percentage($db, $player)).
+  print "<td>".format_percent(player_overall_win_percentage($player)).
     "</td>\n";
 
-  print "<td>".format_average(player_overall_deuces_per_game($db, $player)).
+  print "<td>".format_average(player_overall_deuces_per_game($player)).
     "</td>\n";
 
-  print "<td>".format_average(player_overall_points_per_game($db, $player)).
+  print "<td>".format_average(player_overall_points_per_game($player)).
     "</td>\n";
 
   print "<td>".format_average(
-    player_overall_points_against_per_game($db, $player))."</td>\n";
+    player_overall_points_against_per_game($player))."</td>\n";
 
   print "<td>".format_average(
-    player_overall_points_per_game_as_loser($db, $player))."</td>\n";
+    player_overall_points_per_game_as_loser($player))."</td>\n";
 
   print "<td>".format_average(
-    player_overall_points_against_per_game_as_winner($db, $player))."</td>\n";
+    player_overall_points_against_per_game_as_winner($player))."</td>\n";
 
   print "<td>".format_percent(
-    player_overall_bruise_percentage($db, $player))."</td>\n";
+    player_overall_bruise_percentage($player))."</td>\n";
 
   print "<td>".format_percent(
-    player_overall_bruise_attempts_per_game($db, $player))."</td>\n";
+    player_overall_bruise_attempts_per_game($player))."</td>\n";
 
   print "</tr>\n";
 }
@@ -84,24 +104,24 @@
 </tr>
 
 <?
-foreach (all_players($db) as $player) {
+foreach (all_players() as $player) {
   print "<tr>";
 
   print "<th><a href=\"personal.php?id=$player\">";
-  print player_name($db, $player)."</a></th>\n";
+  print player_name($player)."</a></th>\n";
 
-  print "<td>".player_total_deuces($db, $player)."</td>\n";
-  print "<td>".player_total_points_scored($db, $player)."</td>\n";
-  print "<td>".player_total_points_scored_against($db, $player)."</td>\n";
-  print "<td>".player_total_turkeys($db, $player)."</td>\n";
-  print "<td>".player_total_tetrises($db, $player)."</td>\n";
-  print "<td>".player_total_bruises_successful($db, $player)."</td>\n";
-  print "<td>".player_total_bruises_unsuccessful($db, $player)."</td>\n";
-  print "<td>".player_total_shutouts($db, $player)."</td>\n";
-  print "<td>".player_total_been_shutouts($db, $player)."</td>\n";
-  print "<td>".player_overall_current_streak($db, $player)."</td>\n";
+  print "<td>".player_total_deuces($player)."</td>\n";
+  print "<td>".player_total_points_scored($player)."</td>\n";
+  print "<td>".player_total_points_scored_against($player)."</td>\n";
+  print "<td>".player_total_turkeys($player)."</td>\n";
+  print "<td>".player_total_tetrises($player)."</td>\n";
+  print "<td>".player_total_bruises_successful($player)."</td>\n";
+  print "<td>".player_total_bruises_unsuccessful($player)."</td>\n";
+  print "<td>".player_total_shutouts($player)."</td>\n";
+  print "<td>".player_total_been_shutouts($player)."</td>\n";
+  print "<td>".player_overall_current_streak($player)."</td>\n";
   print "<td>".
-  format_percent(player_overall_double_deuce_to_turkey_conversion_percentage($db, $player))."</td>";
+  format_percent(player_overall_double_deuce_to_turkey_conversion_percentage($player))."</td>";
   print "</tr>\n";
 }
 
@@ -133,26 +153,26 @@
 </tr>
 
 <?
-foreach (all_balls($db) as $ball) {
+foreach (all_balls() as $ball) {
   print "<tr>";
 
-  print "<th>".ball_color($db, $ball)."</th>\n";
+  print "<th>".ball_color($ball)."</th>\n";
 
-  print "<td>".ball_type_name(ball_type($db, $ball))."</td>\n";
+  print "<td>".ball_type_name(ball_type($ball))."</td>\n";
 
   print "<td>".
-  format_percent(ball_overall_use_percentage($db, $ball))."</td>\n";
+  format_percent(ball_overall_use_percentage($ball))."</td>\n";
 
   print "<td>".
-  format_percent(ball_overall_win_percentage($db, $ball))."</td>\n";
+  format_percent(ball_overall_win_percentage($ball))."</td>\n";
 
   print "<td>".
-  format_percent(ball_overall_deuces_per_game($db, $ball))."</td>\n";
+  format_percent(ball_overall_deuces_per_game($ball))."</td>\n";
 
   print "</tr>\n";
 }
 
-sqlite_close($db);
+db_close();
 ?>
 </table>
 
Index: winpercentage.php
===================================================================
--- winpercentage.php	(revision 3)
+++ winpercentage.php	(working copy)
@@ -1,6 +1,7 @@
 <?php
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -21,15 +22,16 @@
 require("statslib.php");
 include ($jpgraph_dir . '/src/jpgraph.php');
 include ($jpgraph_dir . '/src/jpgraph_bar.php');
+require("db.php");
 
-$db = sqlite_open($database_file);
+db_open();
 
 $dataY = array();
 $names = array();
 
-foreach (all_players($db) as $player) {
-  $names[] = player_name($db, $player);
-  $dataY[] = player_overall_win_percentage($db, $player);
+foreach (all_players() as $player) {
+  $names[] = player_name($player);
+  $dataY[] = player_overall_win_percentage($player);
 }
 
 #actually create the picture
Index: AUTHORS
===================================================================
--- AUTHORS	(revision 3)
+++ AUTHORS	(working copy)
@@ -1,2 +1,3 @@
-Mark Drago  <markdrago@mail.com>
-Tom Melendez  <tmelendez@bascom.com>
+Mark Drago		<markdrago@mail.com>
+Josef "Jeff" Sipek	<jeffpc@optonline.net>
+Tom Melendez		<tmelendez@bascom.com>
Index: boccelib.php
===================================================================
--- boccelib.php	(revision 3)
+++ boccelib.php	(working copy)
@@ -1,6 +1,7 @@
 <?
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -20,6 +21,7 @@
 //this file contains general functions that are used throughout officebocce
 
 require("vardefs.php");
+require("db.php");
 
 /* checkrequired($checkarray) takes an array of the form:
  * array("error string 1"=>$field1, "error string 2"=>$field2, ... )
@@ -98,18 +100,17 @@
 }
 
 function getNames($id1, $id2) {
-  global $database_file;
-  $db = sqlite_open($database_file);
-  
+  db_open();
+
   $query = "select firstname, lastname from player where id=$id1";
-  $result = sqlite_query($db,$query);
-  $row = sqlite_fetch_array($result,SQLITE_ASSOC);
+  $result = db_query($query);
+  $row = db_fetch_array($result);
   $firstname1 = $row["firstname"];
   $lastname1 = $row["lastname"];
   
   $query = "select firstname, lastname from player where id=$id2";
-  $result = sqlite_query($db,$query);
-  $row = sqlite_fetch_array($result,SQLITE_ASSOC);
+  $result = db_query($query);
+  $row = db_fetch_array($result);
   $firstname2 = $row["firstname"];
   $lastname2 = $row["lastname"];
 
@@ -127,9 +128,9 @@
       $name2 = $firstname2 . " " . $lastname2;
     }
   }
-
-  sqlite_close($db);
-
+  
+  db_close();
+  
   return array($name1, $name2);
 }
 
Index: db_sqlite.php
===================================================================
--- db_sqlite.php	(revision 0)
+++ db_sqlite.php	(revision 0)
@@ -0,0 +1,91 @@
+<?
+/*
+ * Copyright (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
+ *
+ *This program is free software; you can redistribute it and/or modify
+ *it under the terms of the GNU General Public License as published by
+ *the Free Software Foundation; either version 2 of the License, or
+ *(at your option) any later version.
+ *
+ *This program is distributed in the hope that it will be useful,
+ *but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *GNU General Public License for more details.
+ *
+ *You should have received a copy of the GNU General Public License
+ *along with this program; if not, write to the Free Software
+ *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+if (!@extension_loaded('sqlite'))
+	@dl('sqlite.so');
+
+$db = null;
+$open_count = 0;
+
+function db_open()
+{
+	global $database_file;
+	global $db;
+	global $open_count;
+	
+	$open_count++;
+	if ($open_count!=1)
+		return;
+	
+	$db = sqlite_open($database_file);
+}
+
+function db_close()
+{
+	global $db;
+	global $open_count;
+	
+	$open_count--;
+	if ($open_count>0)
+		return;
+
+	sqlite_close($db);
+	$db = null;
+}
+
+function db_query($sql)
+{
+	global $db;
+	global $open_count;
+	
+	$result = sqlite_query($db,$sql);
+	if ($result===false) {
+		echo "Error, could not execute query:\n";
+		echo "\t$sql\n";
+		echo "Open Count = $open_count\n";
+	}
+	
+	return $result;
+}
+
+function db_fetch_array()
+{
+	global $db;
+	
+	$result = func_get_arg(0);
+	$type = SQLITE_ASSOC;
+	if (func_num_args()==2)
+		$type = func_get_arg(1);
+
+	return sqlite_fetch_array($result,$type);
+}
+
+function db_num_rows($result)
+{
+	return sqlite_num_rows($result);
+}
+
+function db_last_insert_rowid()
+{
+	global $db;
+
+	return sqlite_last_insert_rowid($db);
+}
+
+?>
\ No newline at end of file
Index: deucespergame.php
===================================================================
--- deucespergame.php	(revision 3)
+++ deucespergame.php	(working copy)
@@ -1,6 +1,7 @@
 <?php
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -17,19 +18,20 @@
  *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+require("db.php");
 require("boccelib.php");
 require("statslib.php");
 include ($jpgraph_dir . '/src/jpgraph.php');
 include ($jpgraph_dir . '/src/jpgraph_bar.php');
 
-$db = sqlite_open($database_file);
+db_open();
 
 $dataY = array();
 $names = array();
 
-foreach (all_players($db) as $player) {
-  $names[] = player_name($db, $player);
-  $dataY[] = player_overall_deuces_per_game($db, $player);
+foreach (all_players() as $player) {
+  $names[] = player_name($player);
+  $dataY[] = player_overall_deuces_per_game($player);
 }
 
 #actually create the picture
Index: onegame.php
===================================================================
--- onegame.php	(revision 3)
+++ onegame.php	(working copy)
@@ -1,6 +1,7 @@
 <?
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -17,18 +18,19 @@
  *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+require("db.php");
 require("boccelib.php");
 require("header.php");
 require("side.php");
 
 $game = $_GET["game"];
-$db = sqlite_open($database_file);
-$result = sqlite_query($db,"select * from player");
+db_open();
+$result = db_query("select * from player");
 
 $players = array();
 
-$result = sqlite_query($db,"select winner,loser,winner_points,loser_points,strftime('%s',date) as date from game where id=$game");
-$row = sqlite_fetch_array($result,SQLITE_ASSOC);
+$result = db_query("select winner,loser,winner_points,loser_points,strftime('%s',date) as date from game where id=$game");
+$row = db_fetch_array($result);
 $winner = $row["winner"];
 $loser = $row["loser"];
 $winner_score = $row["winner_points"];
@@ -50,8 +52,8 @@
 $winnertr = "<tr><th>$winner_name</th>";
 $losertr = "<tr><th>$loser_name</th>";
 
-$result = sqlite_query($db,"select * from point where game=$game order by round");
-while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+$result = db_query("select * from point where game=$game order by round");
+while ($row = db_fetch_array($result)) {
   $scorer = $row["scorer"];
   $amount = $row["amount"];
   $round = $row["round"];
@@ -74,14 +76,14 @@
 print $losertr;
 print "</table>";
 
-$result = sqlite_query($db,"select * from bruise where game=$game order by round");
-if (sqlite_num_rows($result) > 0) {
+$result = db_query("select * from bruise where game=$game order by round");
+if (db_num_rows($result) > 0) {
   print '<h3>Bruises</h3>';
   print '<table class="bruises">';
   
   print '<tr><th>Name</th><th>Round</th><th>Success</th></tr>';
 
-  while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+  while ($row = db_fetch_array($result)) {
 
     //get name of bruiser
     $name = "";
@@ -106,7 +108,7 @@
   print "</table>";
 }
 
-sqlite_close($db);
+db_close();
 ?>
 </div>
 </body>
Index: personal.php
===================================================================
--- personal.php	(revision 3)
+++ personal.php	(working copy)
@@ -1,6 +1,7 @@
 <?php
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -17,15 +18,16 @@
  *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+require("db.php");
 require("boccelib.php");
 require("statslib.php");
 require("header.php");
 require("side.php");
 
 $id = $_GET["id"];
-$db = sqlite_open($database_file);
+db_open();
 
-$mainname = player_name($db, $id);
+$mainname = player_name($id);
 
 ?>
 <div class="body">
@@ -44,7 +46,7 @@
 </tr>
 <?
 
-foreach (all_players($db) as $player) {
+foreach (all_players() as $player) {
   if ($player == $id) {
     continue;
   }
@@ -52,33 +54,33 @@
   print "<tr>";
 
   print "<th><a href=\"personal.php?id=$player\">";
-  print player_name($db, $player)."</a></th>\n";
+  print player_name($player)."</a></th>\n";
   
-  print "<td>".player_total_wins_versus($db, $id, $player)."&nbsp;-&nbsp;";
-  print player_total_losses_versus($db, $id, $player)."</td>\n";
+  print "<td>".player_total_wins_versus($id, $player)."&nbsp;-&nbsp;";
+  print player_total_losses_versus($id, $player)."</td>\n";
   
   print "<td>".
-  format_percent(player_overall_win_percentage_versus($db, $id, $player)).
+  format_percent(player_overall_win_percentage_versus($id, $player)).
   "</td>\n";
   
   print "<td>".
-  format_average(player_overall_deuces_per_game_versus($db, $id, $player)).
+  format_average(player_overall_deuces_per_game_versus($id, $player)).
   "</td>\n";
 
   print "<td>".
-  format_average(player_overall_deuces_against_per_game_versus($db, $id,
+  format_average(player_overall_deuces_against_per_game_versus($id,
 						       $player))."</td>\n";
 
   print "<td>".
-  format_average(player_overall_points_scored_per_game_versus($db, $id,
+  format_average(player_overall_points_scored_per_game_versus($id,
 						       $player))."</td>\n";
 
   print "<td>".
-  format_average(player_overall_points_scored_against_per_game_versus($db, $id,
+  format_average(player_overall_points_scored_against_per_game_versus($id,
 						       $player))."</td>\n";
 
   print "<td>".
-  format_percent(player_overall_bruise_percentage_versus($db, $id, $player)).
+  format_percent(player_overall_bruise_percentage_versus($id, $player)).
   "</td>\n";
 
   print "</tr>\n";
@@ -102,7 +104,7 @@
 <th>Been Shutout</th>
 </tr>
 <?
-foreach (all_players($db) as $player) {
+foreach (all_players() as $player) {
   if ($player == $id) {
     continue;
   }
@@ -110,29 +112,29 @@
   print "<tr>";
 
   print "<th><a href=\"personal.php?id=$player\">";
-  print player_name($db, $player)."</a></th>\n";
+  print player_name($player)."</a></th>\n";
 
-  print "<td>".player_total_points_scored_versus($db, $id, $player)."</td>\n";
+  print "<td>".player_total_points_scored_versus($id, $player)."</td>\n";
 
-  print "<td>".player_total_points_scored_against_versus($db,$id,$player).
+  print "<td>".player_total_points_scored_against_versus($id,$player).
   "</td>\n";
 
   print "<td>".
-  format_average(player_overall_bruises_attempted_per_game_versus($db, $id,
+  format_average(player_overall_bruises_attempted_per_game_versus($id,
 							$player))."</td>\n";
 
-  print "<td>".player_total_bruises_attempted_versus($db, $id, $player).
+  print "<td>".player_total_bruises_attempted_versus($id, $player).
   "</td>\n";
 
   print "<td>".
-  format_percent(player_total_games_played_percent_versus($db, $id, $player)).
+  format_percent(player_total_games_played_percent_versus($id, $player)).
   "</td>\n";
 
-  print "<td>".player_total_turkeys_versus($db, $id, $player)."</td>\n";
+  print "<td>".player_total_turkeys_versus($id, $player)."</td>\n";
 
-  print "<td>".player_total_shutouts_versus($db, $id, $player)."</td>\n";
+  print "<td>".player_total_shutouts_versus($id, $player)."</td>\n";
 
-  print "<td>".player_total_been_shutouts_versus($db, $id, $player)."</td>\n";
+  print "<td>".player_total_been_shutouts_versus($id, $player)."</td>\n";
 
   print "</tr>\n";
 }
@@ -152,28 +154,28 @@
 <th>Deuces Per Game</th>
 </tr>
 <?
-foreach (all_balls($db) as $ball) {
+foreach (all_balls() as $ball) {
   print "<tr>";
 
-  print "<th>".ball_color($db, $ball)."</th>\n";
-  print "<td>".ball_type_name(ball_type($db, $ball))."</td>\n";
+  print "<th>".ball_color($ball)."</th>\n";
+  print "<td>".ball_type_name(ball_type($ball))."</td>\n";
 
   print "<td>".
-  format_percent(player_overall_ball_use_percentage($db, $id, $ball)).
+  format_percent(player_overall_ball_use_percentage($id, $ball)).
   "</td>\n";
 
-  print "<td>".format_percent(player_overall_win_percentage_with_ball($db,$id,
+  print "<td>".format_percent(player_overall_win_percentage_with_ball($id,
 								      $ball)).
   "</td>\n";
 
   print "<td>".
-  format_percent(player_overall_deuces_per_game_with_ball($db, $id, $ball)).
+  format_percent(player_overall_deuces_per_game_with_ball($id, $ball)).
   "</td>\n";
 
   print "</tr>\n";
 }
 
-sqlite_close($db);
+db_close();
 
 ?>
 </table>
Index: statslib.php
===================================================================
--- statslib.php	(revision 3)
+++ statslib.php	(working copy)
@@ -1,6 +1,7 @@
 <?
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -27,11 +28,11 @@
 
 
 #return an array of all players' ids
-function all_players(&$db) {
+function all_players() {
   $players = array();
 
-  $result = sqlite_query($db,"select id from player");
-  while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+  $result = db_query("select id from player");
+  while ($row = db_fetch_array($result)) {
     $players[] = $row["id"];
   }
 
@@ -39,174 +40,174 @@
 }
 
 #get player's name
-function player_name(&$db, $id) {
-  $result = sqlite_query($db,"select firstname from player where id=$id");
-  $row = sqlite_fetch_array($result,SQLITE_ASSOC);
+function player_name($id) {
+  $result = db_query("select firstname from player where id=$id");
+  $row = db_fetch_array($result);
   return clean_value($row["firstname"]);
 }
 
 #get player's total number of wins
-function player_total_wins(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from game ".
+function player_total_wins($id) {
+  $result = db_query("select count(*) from game ".
 			 "where game.winner=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of losses
-function player_total_losses(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from game ".
+function player_total_losses($id) {
+  $result = db_query("select count(*) from game ".
 			 "where game.loser=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of games played
-function player_total_games_played(&$db, $id) {
-  return clean_value(player_total_wins($db, $id) +
-		     player_total_losses($db, $id));
+function player_total_games_played($id) {
+  return clean_value(player_total_wins($id) +
+		     player_total_losses($id));
 }
 
 #get player's total points scored
-function player_total_points_scored(&$db, $id) {
-  return clean_value(player_total_points_scored_as_winner($db, $id) +
-		     player_total_points_scored_as_loser($db, $id));
+function player_total_points_scored($id) {
+  return clean_value(player_total_points_scored_as_winner($id) +
+		     player_total_points_scored_as_loser($id));
 }
 
 #get player's total points scored against
-function player_total_points_scored_against(&$db, $id) {
-  return clean_value(player_total_points_scored_against_as_winner($db, $id) +
-		     player_total_points_scored_against_as_loser($db, $id));
+function player_total_points_scored_against($id) {
+  return clean_value(player_total_points_scored_against_as_winner($id) +
+		     player_total_points_scored_against_as_loser($id));
 }
 
 #get player's total number of points scored as a loser
-function player_total_points_scored_as_loser(&$db, $id) {
-  $result = sqlite_query($db,"select sum(game.loser_points) from game where ".
+function player_total_points_scored_as_loser($id) {
+  $result = db_query("select sum(game.loser_points) from game where ".
 			 "game.loser=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of points scored as a winner
-function player_total_points_scored_as_winner(&$db, $id) {
-  $result = sqlite_query($db,"select sum(game.winner_points) from game where ".
+function player_total_points_scored_as_winner($id) {
+  $result = db_query("select sum(game.winner_points) from game where ".
 			 "game.winner=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of points scored against as winner
-function player_total_points_scored_against_as_winner(&$db, $id) {
-  $result = sqlite_query($db,"select sum(game.loser_points) from game where ".
+function player_total_points_scored_against_as_winner($id) {
+  $result = db_query("select sum(game.loser_points) from game where ".
 			 "game.winner=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of points scored against as loser
-function player_total_points_scored_against_as_loser(&$db, $id) {
-  $result = sqlite_query($db,"select sum(game.winner_points) from game where ".
+function player_total_points_scored_against_as_loser($id) {
+  $result = db_query("select sum(game.winner_points) from game where ".
 			 "game.loser=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of deuces
-function player_total_deuces(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from point where ".
+function player_total_deuces($id) {
+  $result = db_query("select count(*) from point where ".
 			 "point.scorer=$id and point.amount=2");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's number of points scored against as a winner
-function player_points_scored_against_as_winner(&$db, $id) {
-  $result = sqlite_query($db,"select sum(game.loser_points) from game where ".
+function player_points_scored_against_as_winner($id) {
+  $result = db_query("select sum(game.loser_points) from game where ".
 			 "game.winner=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's number of points scored against as a loser
-function player_points_scored_against_as_loser(&$db, $id) {
-  $result = sqlite_query($db,"select sum(game.winner_points) from game where ".
+function player_points_scored_against_as_loser($id) {
+  $result = db_query("select sum(game.winner_points) from game where ".
 			 "game.loser=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of good bruises
-function player_total_bruises_successful(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from bruise where ".
+function player_total_bruises_successful($id) {
+  $result = db_query("select count(*) from bruise where ".
 			 "bruise.player=$id and bruise.success=1");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of missed bruises
-function player_total_bruises_unsuccessful(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from bruise where ".
+function player_total_bruises_unsuccessful($id) {
+  $result = db_query("select count(*) from bruise where ".
 			 "bruise.player=$id and bruise.success=0");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of attempted bruises
-function player_total_bruises_attempted(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from bruise where ".
+function player_total_bruises_attempted($id) {
+  $result = db_query("select count(*) from bruise where ".
 			 "bruise.player=$id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's number of shutouts
-function player_total_shutouts(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from game where ".
+function player_total_shutouts($id) {
+  $result = db_query("select count(*) from game where ".
 			 "game.winner=$id and game.loser_points=0");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get number of times a player has been shutout
-function player_total_been_shutouts(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from game where ".
+function player_total_been_shutouts($id) {
+  $result = db_query("select count(*) from game where ".
 			 "game.loser=$id and game.loser_points=0");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of tetrises
-function player_total_tetrises(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from point as point1, point as point2, point as point3, point as point4 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point4.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point4.id=point3.id+1 and point4.amount=2 and point1.game=point2.game and point2.game=point3.game and point3.game=point4.game");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_tetrises($id) {
+  $result = db_query("select count(*) from point as point1, point as point2, point as point3, point as point4 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point4.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point4.id=point3.id+1 and point4.amount=2 and point1.game=point2.game and point2.game=point3.game and point3.game=point4.game");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of turkeys
-function player_total_turkeys(&$db, $id) {
-  $result = sqlite_query($db,"select count(*) from point as point1, point as point2, point as point3 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point1.game=point2.game and point2.game=point3.game");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
-  return clean_value($row[0] - (player_total_tetrises($db, $id) * 2));
+function player_total_turkeys($id) {
+  $result = db_query("select count(*) from point as point1, point as point2, point as point3 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point1.game=point2.game and point2.game=point3.game");
+  $row = db_fetch_array($result,SQLITE_NUM);
+  return clean_value($row[0] - (player_total_tetrises($id) * 2));
 }
 
 #get player's total number of times in turkey territory
-function player_total_double_deuces_with_possible_turkey(&$db, $id) {
+function player_total_double_deuces_with_possible_turkey($id) {
   #in this query, point0 is a placeholder for the point before the double
   #deuce.  This helps us avoid scoring a turkey as two double deuces
   #(2,[2),2]  <--- first double is in paranthesis and second is in brackets
   #FIXME: this query doesn't work on the first point in the DB
-  $result = sqlite_query($db,"select count(*) from point as point0, point as point1, point as point2, point as point3 where ((point0.id+1=point1.id) and (point0.amount!=2 or point0.scorer!=$id or point0.game!=point1.game)) and point1.scorer=$id and point2.scorer=$id and point1.amount=2 and point2.amount=2 and point2.id=point1.id+1 and point3.id=point2.id+1 and point1.game=point2.game and point2.game=point3.game");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $result = db_query("select count(*) from point as point0, point as point1, point as point2, point as point3 where ((point0.id+1=point1.id) and (point0.amount!=2 or point0.scorer!=$id or point0.game!=point1.game)) and point1.scorer=$id and point2.scorer=$id and point1.amount=2 and point2.amount=2 and point2.id=point1.id+1 and point3.id=point2.id+1 and point1.game=point2.game and point2.game=point3.game");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's overall current streak
-function player_overall_current_streak(&$db, $id) {
+function player_overall_current_streak($id) {
   #get list of every game this player played in, sorted backwards by date
-  $result = sqlite_query($db,"select winner, loser from game where winner=$id or loser=$id order by date desc");
+  $result = db_query("select winner, loser from game where winner=$id or loser=$id order by date desc");
   
   #figure out what happened in the last game
-  $row1 = sqlite_fetch_array($result,SQLITE_ASSOC);
+  $row1 = db_fetch_array($result,SQLITE_ASSOC);
   if ($row1['winner'] == $id) {
     $tag = "W";
     $key = "winner";
@@ -219,7 +220,7 @@
 
   #count how many times whatever happend last game happened before that
   #without anything else happening
-  while($row = sqlite_fetch_array($result, SQLITE_ASSOC)) {
+  while($row = db_fetch_array($result, SQLITE_ASSOC)) {
     if ($row[$key] == $id) {
       $count++;
     } else {
@@ -237,63 +238,63 @@
  ******************************/
 
 #return number of times this player has used this ball
-function player_total_games_played_with_ball(&$db, $id, $ball) {
-  $type = ball_type($db, $ball);
+function player_total_games_played_with_ball($id, $ball) {
+  $type = ball_type($ball);
   $winnerfield = "winner_ball$type";
   $loserfield  = "loser_ball$type";
 
-  $result = sqlite_query($db,"select count(*) from game where (winner=$id and $winnerfield=$ball) or (loser=$id and $loserfield=$ball)");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $result = db_query("select count(*) from game where (winner=$id and $winnerfield=$ball) or (loser=$id and $loserfield=$ball)");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #return number of times this player has won with this ball
-function player_total_games_won_with_ball(&$db, $id, $ball) {
-  $type = ball_type($db, $ball);
+function player_total_games_won_with_ball($id, $ball) {
+  $type = ball_type($ball);
   $winnerfield = "winner_ball$type";
 
-  $result = sqlite_query($db,"select count(*) from game where winner=$id and $winnerfield=$ball");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $result = db_query("select count(*) from game where winner=$id and $winnerfield=$ball");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_deuces_with_ball(&$db, $id, $ball) {
-  $type = ball_type($db, $ball);
+function player_total_deuces_with_ball($id, $ball) {
+  $type = ball_type($ball);
   $winnerfield = "winner_ball$type";
   $loserfield  = "loser_ball$type";
 
-  $result = sqlite_query($db, "select count(*) from point, game where point.game = game.id and point.amount=2 and ((game.winner=$id and point.scorer=game.winner and game.$winnerfield=$ball) or (game.loser=$id and point.scorer=game.loser and game.$loserfield=$ball))");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+  $result = db_query("select count(*) from point, game where point.game = game.id and point.amount=2 and ((game.winner=$id and point.scorer=game.winner and game.$winnerfield=$ball) or (game.loser=$id and point.scorer=game.loser and game.$loserfield=$ball))");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_overall_deuces_per_game_with_ball(&$db, $id, $ball) {
-  $games_played_with_ball = player_total_games_played_with_ball($db,$id,$ball);
+function player_overall_deuces_per_game_with_ball($id, $ball) {
+  $games_played_with_ball = player_total_games_played_with_ball($id,$ball);
   if ($games_played_with_ball == 0) {
     return 0;
   }
 
-  $deuces_scored_with_ball = player_total_deuces_with_ball($db, $id, $ball);
+  $deuces_scored_with_ball = player_total_deuces_with_ball($id, $ball);
   return clean_value($deuces_scored_with_ball / $games_played_with_ball);
 }
 
-function player_overall_win_percentage_with_ball(&$db, $id, $ball) {
-  $games_played_with_ball = player_total_games_played_with_ball($db,$id,$ball);
+function player_overall_win_percentage_with_ball($id, $ball) {
+  $games_played_with_ball = player_total_games_played_with_ball($id,$ball);
   if ($games_played_with_ball == 0) {
     return 0;
   }
 
-  $games_won_with_ball = player_total_games_won_with_ball($db, $id, $ball);
+  $games_won_with_ball = player_total_games_won_with_ball($id, $ball);
   return clean_value($games_won_with_ball / $games_played_with_ball);
 }
 
-function player_overall_ball_use_percentage(&$db, $id, $ball) {
-  $games_played = player_total_games_played($db, $id);
+function player_overall_ball_use_percentage($id, $ball) {
+  $games_played = player_total_games_played($id);
   if ($games_played == 0) {
     return 0;
   }
 
-  $games_played_with_ball = player_total_games_played_with_ball($db,$id,$ball);
+  $games_played_with_ball = player_total_games_played_with_ball($id,$ball);
   return clean_value($games_played_with_ball / $games_played);
 }
 
@@ -301,213 +302,212 @@
  * Stats that reference another player *
  ***************************************/
 
-function player_total_wins_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from game where game.winner = $id and game.loser = $player");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_wins_versus($id, $player) {
+  $result = db_query("select count(*) from game where game.winner = $id and game.loser = $player");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_losses_versus(&$db, $id, $player) {
+function player_total_losses_versus($id, $player) {
   //this is just the reverse of player_total_wins_versus
-  return player_total_wins_versus($db, $player, $id);
+  return player_total_wins_versus($player, $id);
 }
 
-function player_total_points_scored_as_winner_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select sum(game.winner_points) from game where game.winner = $id and game.loser = $player");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_points_scored_as_winner_versus($id, $player) {
+  $result = db_query("select sum(game.winner_points) from game where game.winner = $id and game.loser = $player");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_points_scored_as_loser_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select sum(game.loser_points) from game where game.winner = $player and game.loser = $id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_points_scored_as_loser_versus($id, $player) {
+  $result = db_query("select sum(game.loser_points) from game where game.winner = $player and game.loser = $id");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_points_scored_against_as_loser_versus(&$db, $id,
+function player_total_points_scored_against_as_loser_versus($id,
 							    $player) {
   //this is the reverse of player_total_points_scored_as_winner_versus
-  return player_total_points_scored_as_winner_versus($db, $player, $id);
+  return player_total_points_scored_as_winner_versus($player, $id);
 }
 
-function player_total_points_scored_against_as_winner_versus(&$db, $id,
+function player_total_points_scored_against_as_winner_versus($id,
 							      $player) {
   //this is the reverse of player_total_points_scored_as_loser_versus
-  return player_total_points_scored_as_loser_versus($db, $player, $id);
+  return player_total_points_scored_as_loser_versus($player, $id);
 }
 
-function player_total_points_scored_versus(&$db, $id, $player) {
-  return player_total_points_scored_as_loser_versus($db, $id, $player) +
-    player_total_points_scored_as_winner_versus($db, $id, $player);
+function player_total_points_scored_versus($id, $player) {
+  return player_total_points_scored_as_loser_versus($id, $player) +
+    player_total_points_scored_as_winner_versus($id, $player);
 }
 
-function player_total_points_scored_against_versus(&$db, $id, $player) {
+function player_total_points_scored_against_versus($id, $player) {
   //this is the reverse of player_total_points_scored_versus
-  return player_total_points_scored_versus($db, $player, $id);
+  return player_total_points_scored_versus($player, $id);
 }  
 
-function player_total_deuces_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from game, point where game.id = point.game and point.scorer = $id and point.amount = 2 and ((game.winner = $player and game.loser = $id) or (game.loser = $player and game.winner = $id))");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_deuces_versus($id, $player) {
+  $result = db_query("select count(*) from game, point where game.id = point.game and point.scorer = $id and point.amount = 2 and ((game.winner = $player and game.loser = $id) or (game.loser = $player and game.winner = $id))");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_deuces_against_versus(&$db, $id, $player) {
-  return player_total_deuces_versus($db, $player, $id);
+function player_total_deuces_against_versus($id, $player) {
+  return player_total_deuces_versus($player, $id);
 }
 
-function player_total_shutouts_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from game where game.winner = $id and game.loser = $player and game.loser_points=0");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_shutouts_versus($id, $player) {
+  $result = db_query("select count(*) from game where game.winner = $id and game.loser = $player and game.loser_points=0");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_been_shutouts_versus(&$db, $id, $player) {
+function player_total_been_shutouts_versus($id, $player) {
   //this is the reverse of player_total_shutouts_versus
-  return player_total_shutouts_versus($db, $player, $id);
+  return player_total_shutouts_versus($player, $id);
 }
 
-function player_total_bruises_successful_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from bruise, game where ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player)) and game.id = bruise.game and bruise.player = $id and bruise.success = 1");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_bruises_successful_versus($id, $player) {
+  $result = db_query("select count(*) from bruise, game where ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player)) and game.id = bruise.game and bruise.player = $id and bruise.success = 1");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_bruises_missed_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from bruise, game where ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player)) and game.id = bruise.game and bruise.player = $id and bruise.success != 1");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_bruises_missed_versus($id, $player) {
+  $result = db_query("select count(*) from bruise, game where ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player)) and game.id = bruise.game and bruise.player = $id and bruise.success != 1");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }  
 
-function player_total_bruises_attempted_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from bruise, game where ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player)) and game.id = bruise.game and bruise.player = $id");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_bruises_attempted_versus($id, $player) {
+  $result = db_query("select count(*) from bruise, game where ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player)) and game.id = bruise.game and bruise.player = $id");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
-function player_total_games_played_versus(&$db, $id, $player) {
-  return player_total_wins_versus($db, $id, $player) +
-    player_total_losses_versus($db, $id, $player);
+function player_total_games_played_versus($id, $player) {
+  return player_total_wins_versus($id, $player) +
+    player_total_losses_versus($id, $player);
 }
 
 #get player's total number of tetrises
-function player_total_tetrises_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from game, point as point1, point as point2, point as point3, point as point4 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point4.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point4.id=point3.id+1 and point4.amount=2 and point1.game=point2.game and point2.game=point3.game and point3.game=point4.game and point1.game = game.id and ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player))");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
+function player_total_tetrises_versus($id, $player) {
+  $result = db_query("select count(*) from game, point as point1, point as point2, point as point3, point as point4 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point4.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point4.id=point3.id+1 and point4.amount=2 and point1.game=point2.game and point2.game=point3.game and point3.game=point4.game and point1.game = game.id and ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player))");
+  $row = db_fetch_array($result,SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get player's total number of turkeys
-function player_total_turkeys_versus(&$db, $id, $player) {
-  $result = sqlite_query($db,"select count(*) from game, point as point1, point as point2, point as point3 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point1.game=point2.game and point2.game=point3.game and point1.game = game.id and ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player))");
-  $row = sqlite_fetch_array($result,SQLITE_NUM);
-  return clean_value($row[0] - (player_total_tetrises($db, $id) * 2));
+function player_total_turkeys_versus($id, $player) {
+  $result = db_query("select count(*) from game, point as point1, point as point2, point as point3 where point1.scorer=$id and point2.scorer=$id and point3.scorer=$id and point1.amount=2 and point2.id=point1.id+1 and point2.amount=2 and point3.id=point2.id+1 and point3.amount=2 and point1.game=point2.game and point2.game=point3.game and point1.game = game.id and ((game.winner = $id and game.loser = $player) or (game.loser = $id and game.winner = $player))");
+  $row = db_fetch_array($result,SQLITE_NUM);
+  return clean_value($row[0] - (player_total_tetrises($id) * 2));
 }
 
 /******************************************
  * Overall Stats that require calculation *
  ******************************************/
 
-function player_overall_win_percentage(&$db, $id) {
-  $games_played = player_total_games_played($db, $id);
+function player_overall_win_percentage($id) {
+  $games_played = player_total_games_played($id);
 
   if ($games_played == 0) {
     return 0;
   }
 
-  $total_wins = player_total_wins($db, $id);
+  $total_wins = player_total_wins($id);
   return clean_value($total_wins / $games_played);
 }
 
-function player_overall_points_per_game(&$db, $id) {
-  $games_played = player_total_games_played($db, $id);
+function player_overall_points_per_game($id) {
+  $games_played = player_total_games_played($id);
 
   if ($games_played == 0) {
     return 0;
   }
 
-  $total_points = player_total_points_scored($db, $id);
+  $total_points = player_total_points_scored($id);
   return clean_value($total_points / $games_played);
 }
 
-function player_overall_points_against_per_game(&$db, $id) {
-  $games_played = player_total_games_played($db, $id);
+function player_overall_points_against_per_game($id) {
+  $games_played = player_total_games_played($id);
 
   if ($games_played == 0) {
     return 0;
   }
 
-  $total_points_against = player_total_points_scored_against($db, $id);
+  $total_points_against = player_total_points_scored_against($id);
   return clean_value($total_points_against / $games_played);
 }
 
-function player_overall_deuces_per_game(&$db, $id) {
-  $games_played = player_total_games_played($db, $id);
+function player_overall_deuces_per_game($id) {
+  $games_played = player_total_games_played($id);
 
   if ($games_played == 0) {
     return 0;
   }
 
-  $total_deuces = player_total_deuces($db, $id);
+  $total_deuces = player_total_deuces($id);
   return clean_value($total_deuces / $games_played);
 }
 
-function player_overall_points_per_game_as_loser(&$db, $id) {
-  $total_losses = player_total_losses($db, $id);
+function player_overall_points_per_game_as_loser($id) {
+  $total_losses = player_total_losses($id);
 
   if ($total_losses == 0) {
     return 0;
   }
 
-  $total_points_as_loser = player_total_points_scored_as_loser($db, $id);
+  $total_points_as_loser = player_total_points_scored_as_loser($id);
   return clean_value($total_points_as_loser / $total_losses);
 }
 
-function player_overall_points_against_per_game_as_winner(&$db, $id) {
-  $total_wins = player_total_wins($db, $id);
+function player_overall_points_against_per_game_as_winner($id) {
+  $total_wins = player_total_wins($id);
 
   if ($total_wins == 0) {
     return 0;
   }
 
   $total_points_against_as_winner =
-    player_total_points_scored_against_as_winner($db, $id);
+    player_total_points_scored_against_as_winner($id);
 
   return clean_value($total_points_against_as_winner / $total_wins);
 }
 
-function player_overall_bruise_percentage(&$db, $id) {
-  $total_bruise_attempts = player_total_bruises_attempted($db, $id);
+function player_overall_bruise_percentage($id) {
+  $total_bruise_attempts = player_total_bruises_attempted($id);
 
   if ($total_bruise_attempts == 0) {
     return 0;
   }
 
-  $good_bruises = player_total_bruises_successful($db, $id);
+  $good_bruises = player_total_bruises_successful($id);
   return clean_value($good_bruises / $total_bruise_attempts);
 }
 
-function player_overall_bruise_attempts_per_game(&$db, $id) {
-  $total_games_played = player_total_games_played($db, $id);
+function player_overall_bruise_attempts_per_game($id) {
+  $total_games_played = player_total_games_played($id);
   
   if ($total_games_played == 0) {
     return 0;
   }
 
-  $total_bruise_attempts = player_total_bruises_attempted($db, $id);
+  $total_bruise_attempts = player_total_bruises_attempted($id);
   return clean_value($total_bruise_attempts / $total_games_played);
 }
 
-function player_overall_double_deuce_to_turkey_conversion_percentage(&$db,
-								     $id) {
+function player_overall_double_deuce_to_turkey_conversion_percentage($id) {
   $total_turkey_territories =
-    player_total_double_deuces_with_possible_turkey($db, $id);
+    player_total_double_deuces_with_possible_turkey($id);
 
   if ($total_turkey_territories == 0) {
     return 0;
   }
 
-  $total_turkeys = player_total_turkeys($db, $id);
+  $total_turkeys = player_total_turkeys($id);
   return clean_value($total_turkeys / $total_turkey_territories);
 }
 
@@ -515,92 +515,92 @@
  * Stats that reference another player and require calculation *
  ***************************************************************/
 
-function player_overall_win_percentage_versus(&$db, $id, $player) {
+function player_overall_win_percentage_versus($id, $player) {
   $total_games_played_versus =
-    player_total_games_played_versus($db, $id, $player);
+    player_total_games_played_versus($id, $player);
   
   if ($total_games_played_versus == 0) {
     return 0;
   }
 
-  $total_wins_versus = player_total_wins_versus($db, $id, $player);
+  $total_wins_versus = player_total_wins_versus($id, $player);
   return clean_value($total_wins_versus / $total_games_played_versus);
 }
 
-function player_overall_deuces_per_game_versus(&$db, $id, $player) {
+function player_overall_deuces_per_game_versus($id, $player) {
   $total_games_played_versus = 
-    player_total_games_played_versus($db, $id, $player);
+    player_total_games_played_versus($id, $player);
   
   if ($total_games_played_versus == 0) {
     return 0;
   }
 
-  $total_deuces_versus = player_total_deuces_versus($db, $id, $player);
+  $total_deuces_versus = player_total_deuces_versus($id, $player);
   return clean_value($total_deuces_versus / $total_games_played_versus);
 }
 
-function player_overall_deuces_against_per_game_versus(&$db, $id, $player) {
+function player_overall_deuces_against_per_game_versus($id, $player) {
   //this is the reverse of player_overall_deuces_per_game_versus
-  return player_overall_deuces_per_game_versus($db, $player, $id);
+  return player_overall_deuces_per_game_versus($player, $id);
 }
 
-function player_overall_points_scored_per_game_versus(&$db, $id, $player) {
+function player_overall_points_scored_per_game_versus($id, $player) {
   $total_games_played_versus = 
-    player_total_games_played_versus($db, $id, $player);
+    player_total_games_played_versus($id, $player);
   
   if ($total_games_played_versus == 0) {
     return 0;
   }
 
   $total_points_scored_versus =
-    player_total_points_scored_versus($db, $id, $player);
+    player_total_points_scored_versus($id, $player);
   return clean_value($total_points_scored_versus / $total_games_played_versus);
 }
   
-function player_overall_points_scored_against_per_game_versus(&$db, $id,
+function player_overall_points_scored_against_per_game_versus($id,
 							      $player) {
   //this is the reverse of player_overall_points_scored_per_game_versus
-  return player_overall_points_scored_per_game_versus($db, $player, $id);
+  return player_overall_points_scored_per_game_versus($player, $id);
 }
 
-function player_overall_bruise_percentage_versus(&$db, $id, $player) {
+function player_overall_bruise_percentage_versus($id, $player) {
   $total_bruises_attempted_versus =
-    player_total_bruises_attempted_versus($db, $id, $player);
+    player_total_bruises_attempted_versus($id, $player);
 
   if ($total_bruises_attempted_versus == 0) {
     return 0;
   }
 
   $total_bruises_successful_versus =
-    player_total_bruises_successful_versus($db, $id, $player);
+    player_total_bruises_successful_versus($id, $player);
 
   return clean_value($total_bruises_successful_versus /
 		     $total_bruises_attempted_versus);
 }
 
-function player_overall_bruises_attempted_per_game_versus(&$db, $id, $player) {
+function player_overall_bruises_attempted_per_game_versus($id, $player) {
   $total_games_played_versus = 
-    player_total_games_played_versus($db, $id, $player);
+    player_total_games_played_versus($id, $player);
   
   if ($total_games_played_versus == 0) {
     return 0;
   }
 
   $total_bruises_attempted_versus =
-    player_total_bruises_attempted_versus($db, $id, $player);
+    player_total_bruises_attempted_versus($id, $player);
   return clean_value($total_bruises_attempted_versus /
 		     $total_games_played_versus);
 }
 
-function player_total_games_played_percent_versus(&$db, $id, $player) {
+function player_total_games_played_percent_versus($id, $player) {
   $total_games_played_versus =
-    player_total_games_played_versus($db, $id, $player);
+    player_total_games_played_versus($id, $player);
 
   if ($total_games_played_versus == 0) {
     return 0;
   }  
 
-  $total_games_played = player_total_games_played($db, $id);
+  $total_games_played = player_total_games_played($id);
   return clean_value($total_games_played_versus / $total_games_played);
 }
 
@@ -609,11 +609,11 @@
  ***************************************/
 
 #get an array of all of the ball IDs
-function all_balls(&$db) {
+function all_balls() {
   $balls = array();
 
-  $result = sqlite_query($db,"select id from ball");
-  while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+  $result = db_query("select id from ball");
+  while ($row = db_fetch_array($result,SQLITE_ASSOC)) {
     $balls[] = $row["id"];
   }
 
@@ -621,12 +621,12 @@
 }
 
 #get an array of all of the bruiser's ball IDs
-function all_bruisers(&$db) {
+function all_bruisers() {
   $bruiser_num = 1;
 
   $balls = array();
-  $result = sqlite_query($db, "select id from ball where num=$bruiser_num");
-  while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+  $result = db_query("select id from ball where num=$bruiser_num");
+  while ($row = db_fetch_array($result,SQLITE_ASSOC)) {
     $balls[] = $row["id"];
   }
 
@@ -634,12 +634,12 @@
 }
 
 #get an array of all of the small ball's ball IDs
-function all_small_balls(&$db) {
+function all_small_balls() {
   $small_num = 2;
 
   $balls = array();
-  $result = sqlite_query($db, "select id from ball where num=$small_num");
-  while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+  $result = db_query("select id from ball where num=$small_num");
+  while ($row = db_fetch_array($result,SQLITE_ASSOC)) {
     $balls[] = $row["id"];
   }
 
@@ -647,16 +647,16 @@
 }
 
 #get the string representation of the ball color
-function ball_color(&$db, $ball) {
-  $result = sqlite_query($db, "select color from ball where id=$ball");
-  $row = sqlite_fetch_array($result, SQLITE_NUM);
+function ball_color($ball) {
+  $result = db_query("select color from ball where id=$ball");
+  $row = db_fetch_array($result, SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #get the type of the ball as an integer
-function ball_type(&$db, $ball) {
-  $result = sqlite_query($db, "select num from ball where id=$ball");
-  $row = sqlite_fetch_array($result, SQLITE_NUM);
+function ball_type($ball) {
+  $result = db_query("select num from ball where id=$ball");
+  $row = db_fetch_array($result, SQLITE_NUM);
   return clean_value($row[0]);
 }
   
@@ -676,70 +676,70 @@
 }
 
 #return the total number of games that have been played with this ball
-function ball_total_games_played(&$db, $ball) {
-  $type = ball_type($db, $ball);
+function ball_total_games_played($ball) {
+  $type = ball_type($ball);
   $winnerfield = "winner_ball$type";
   $loserfield  = "loser_ball$type";
 
-  $result = sqlite_query($db, "select count(*) from game where ($winnerfield=$ball or $loserfield=$ball)");
-  $row = sqlite_fetch_array($result, SQLITE_NUM);
+  $result = db_query("select count(*) from game where ($winnerfield=$ball or $loserfield=$ball)");
+  $row = db_fetch_array($result, SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #return the total number of games that have been won with this ball
-function ball_total_games_won(&$db, $ball) {
-  $type = ball_type($db, $ball);
+function ball_total_games_won($ball) {
+  $type = ball_type($ball);
   $winnerfield = "winner_ball$type";
 
-  $result = sqlite_query($db, "select count(*) from game where $winnerfield=$ball");
-  $row = sqlite_fetch_array($result, SQLITE_NUM);
+  $result = db_query("select count(*) from game where $winnerfield=$ball");
+  $row = db_fetch_array($result, SQLITE_NUM);
   return clean_value($row[0]);
 }  
 
 #number of deuces scored with this ball color
-function ball_total_deuces_scored(&$db, $ball) {
-  $type = ball_type($db, $ball);
+function ball_total_deuces_scored($ball) {
+  $type = ball_type($ball);
   $winnerfield = "winner_ball$type";
   $loserfield  = "loser_ball$type";
 
-  $result = sqlite_query($db, "select count(*) from point, game where point.game = game.id and point.amount=2 and ((point.scorer=game.winner and game.$winnerfield=$ball) or (point.scorer=game.loser and game.$loserfield=$ball))");
-  $row = sqlite_fetch_array($result, SQLITE_NUM);
+  $result = db_query("select count(*) from point, game where point.game = game.id and point.amount=2 and ((point.scorer=game.winner and game.$winnerfield=$ball) or (point.scorer=game.loser and game.$loserfield=$ball))");
+  $row = db_fetch_array($result, SQLITE_NUM);
   return clean_value($row[0]);
 }
 
 #return the deuces per game when played with a certain ball
-function ball_overall_deuces_per_game(&$db, $ball) {
-  $ball_total_games_played = ball_total_games_played($db, $ball);
+function ball_overall_deuces_per_game($ball) {
+  $ball_total_games_played = ball_total_games_played($ball);
   
   if ($ball_total_games_played == 0) {
     return 0;
   }
 
-  $ball_total_deuces = ball_total_deuces_scored($db, $ball);
+  $ball_total_deuces = ball_total_deuces_scored($ball);
   return clean_value($ball_total_deuces / $ball_total_games_played);
 }
 
 #return the frequency which this ball is played with overall
-function ball_overall_use_percentage(&$db, $ball) {
-  $universe_num_games = universe_total_games_played($db);
+function ball_overall_use_percentage($ball) {
+  $universe_num_games = universe_total_games_played();
 
   if ($universe_num_games == 0) {
     return 0;
   }
 
-  $ball_total_games_played = ball_total_games_played($db, $ball);
+  $ball_total_games_played = ball_total_games_played($ball);
   return clean_value($ball_total_games_played / $universe_num_games);
 }
 
 #return the win percentage of this ball
-function ball_overall_win_percentage(&$db, $ball) {
-  $ball_total_games_played = ball_total_games_played($db, $ball);
+function ball_overall_win_percentage($ball) {
+  $ball_total_games_played = ball_total_games_played($ball);
 
   if ($ball_total_games_played == 0) {
     return 0;
   }
 
-  $ball_games_won = ball_total_games_won($db, $ball);
+  $ball_games_won = ball_total_games_won($ball);
 
   return clean_value($ball_games_won / $ball_total_games_played);
 }
@@ -749,9 +749,9 @@
  *************************************************/
 
 #return the total number of games ever played
-function universe_total_games_played(&$db) {
-  $result = sqlite_query($db, "select count(*) from game");
-  $row = sqlite_fetch_array($result, SQLITE_NUM);
+function universe_total_games_played() {
+  $result = db_query("select count(*) from game");
+  $row = db_fetch_array($result, SQLITE_NUM);
   return clean_value($row[0]);
 }
 
Index: allscores.php
===================================================================
--- allscores.php	(revision 3)
+++ allscores.php	(working copy)
@@ -1,6 +1,7 @@
 <?
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -17,6 +18,7 @@
  *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+require("db.php");
 require("boccelib.php");
 require("header.php");
 require("side.php");
@@ -27,17 +29,17 @@
 <tr><th>Winner</th><th>Loser</th><th>Score</th><th>Date & Time</th></tr>
 <?
 
-$db = sqlite_open($database_file);
-$result = sqlite_query($db,"select * from player");
+db_open();
+$result = db_query("select * from player");
 
 $players = array();
 
-while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+while ($row = db_fetch_array($result)) {
   $players[$row["id"]] = $row["firstname"];
  }
 
-$result = sqlite_query($db,"select id,winner,loser,winner_points,loser_points,strftime('%s',date) as date from game order by date desc");
-while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+$result = db_query("select id,winner,loser,winner_points,loser_points,strftime('%s',date) as date from game order by date desc");
+while ($row = db_fetch_array($result)) {
   $winner_name = $players[$row["winner"]];
   $loser_name = $players[$row["loser"]];
   $score = $row["winner_points"] . " - " . $row["loser_points"];
@@ -45,7 +47,7 @@
   $id = $row["id"];
   echo "<tr><td>$winner_name</td><td>$loser_name</td><td>$score</td><td><a href='onegame.php?game=$id'>$date</a></td></tr>";
  }
-sqlite_close($db);
+db_close();
 ?>
 </table>
 </div>
Index: bruisepercentage.php
===================================================================
--- bruisepercentage.php	(revision 3)
+++ bruisepercentage.php	(working copy)
@@ -1,6 +1,7 @@
 <?php
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -17,19 +18,20 @@
  *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+require("db.php");
 require("boccelib.php");
 require("statslib.php");
 include ($jpgraph_dir . '/src/jpgraph.php');
 include ($jpgraph_dir . '/src/jpgraph_bar.php');
 
-$db = sqlite_open($database_file);
+db_open();
 
 $dataY = array();
 $names = array();
 
-foreach (all_players($db) as $player) {
-  $names[] = player_name($db, $player);
-  $dataY[] = player_overall_bruise_percentage($db, $player);
+foreach (all_players() as $player) {
+  $names[] = player_name($player);
+  $dataY[] = player_overall_bruise_percentage($player);
 }
 
 #actually create the picture
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 3)
+++ ChangeLog	(working copy)
@@ -1,4 +1,11 @@
-2005-1-2   Mark Drago   <markdrago@mail.com>
+2005-02-02   Josef "Jeff" Sipek <jeffpc@optonline.net>
+	* ChangeLog
+	Prepended the month and day numbers with 0s
+	* AUTHORS
+	Beautified this mission critical file
+	* *.php
+	Converted all the code to use the brand new db wrapper system
+2005-01-02   Mark Drago   <markdrago@mail.com>
 	* personal.php:
 	Added 'Balls' table which contains stats for use percentage,
 	win percentage and deuces per game for each ball in the system as
Index: addplayer.php
===================================================================
--- addplayer.php	(revision 3)
+++ addplayer.php	(working copy)
@@ -1,6 +1,7 @@
 <?
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -17,6 +18,7 @@
  *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+require ('db.php');
 require ('boccelib.php');
 
 $notice = "";
@@ -64,28 +66,28 @@
   }
 
   if ($notice == "") {
-    $db = sqlite_open($database_file);    
-
+    db_open();
+    
     $query = "select count(*) from player where username='$uname'";
-    $result = sqlite_query($db,$query);
-    $row = sqlite_fetch_array($result,SQLITE_NUM);
+    $result = db_query($query);
+    $row = db_fetch_array($result);
     $count = $row[0];
     if ($count > 0) {
       $notice = "The username '$uname' is already taken.  " .
 	"Please choose another username.";
+      $uname = "";
     }
-    $uname = "";
-    sqlite_close($db);
+    db_close();
 
   }
 
   if ($notice == "") {
-    $db = sqlite_open($database_file);
+    db_open();
     $md5pass = md5($pass);
     $query = "insert into player values " .
       "(null,'$uname','$fname','$lname','$email','$md5pass')";
-    sqlite_query($db,$query);
-    sqlite_close($db);
+    db_query($query);
+    db_close();
 
     $notice = "The user '$uname' has been created";
   }
@@ -135,4 +137,4 @@
 </form>
 </div>
 </body>
-</html>
\ No newline at end of file
+</html>
Index: config.php
===================================================================
--- config.php	(revision 3)
+++ config.php	(working copy)
@@ -1,4 +1,12 @@
 <?
 $jpgraph_dir = "../jpgraph-1.17beta2";
 
-?>
\ No newline at end of file
+# Database engine to use
+#    Choices:
+#	sqlite
+$dbengine = "sqlite";
+
+# Database file for sqlite (used only if $dbengine is set to sqlite)
+$database_file = "bocce.db";
+
+?>
Index: index.php
===================================================================
--- index.php	(revision 3)
+++ index.php	(working copy)
@@ -1,6 +1,7 @@
 <?
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -25,7 +26,7 @@
 
 ?>
 <div id="mainbody">
-<p>This is meant to be an exercise in web development with php and sqlite.  This is also a great excuse to go extrememly overboard with statistics for bocce.</p>
+<p>This is meant to be an exercise in web development with php and sqlite.  This is also a great excuse to go extrememly overboard with statistics for bocce, but it should be trivial adding support for other database engines.</p>
 <img src="images/pope.gif" alt="The pope playing bocce" />
 </div>
 <div class="cleaner" />
Index: rollingwinpercentage.php
===================================================================
--- rollingwinpercentage.php	(revision 3)
+++ rollingwinpercentage.php	(working copy)
@@ -1,6 +1,7 @@
 <?php
 /*
  * Copyright (C) 2004, 2005 Mark Drago
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -17,6 +18,7 @@
  *Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+require("db.php");
 require("boccelib.php");
 require ($jpgraph_dir . '/src/jpgraph.php');
 require ($jpgraph_dir . '/src/jpgraph_line.php');
@@ -25,12 +27,12 @@
 $num_games_in_average = 5;
 
 #get all data for creating the picture
-$db = sqlite_open($database_file);
+db_open();
 $player = array();
 
 #get names of all players
-$result = sqlite_query($db,"select * from player");
-while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+$result = db_query("select * from player");
+while ($row = db_fetch_array($result)) {
   $player[$row["id"]] = array();
   $player[$row["id"]]["name"] = $row["firstname"];
   $player[$row["id"]]["id"] = $row["id"];
@@ -42,10 +44,10 @@
 }
 
 #get record of all players
-$result = sqlite_query($db,"select winner, loser from game order by date");
-while ($row = sqlite_fetch_array($result,SQLITE_NUM)) {
-  array_push($player[$row[0]]["record"], 1);
-  array_push($player[$row[1]]["record"], 0);
+$result = db_query("select winner, loser from game order by date");
+while ($row = db_fetch_array($result)) {
+  array_push($player[$row["winner"]]["record"], 1);
+  array_push($player[$row["loser"]]["record"], 0);
 }
 
 $colors = array("", "blue", "red", "green", "yellow");
Index: addscore.php
===================================================================
--- addscore.php	(revision 3)
+++ addscore.php	(working copy)
@@ -2,6 +2,7 @@
 /*
  * Copyright (C) 2004, 2005 Mark Drago
  *           (C) 2004 Tom Melendez
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -19,6 +20,7 @@
  */
 
 session_start();
+require('db.php');
 require('boccelib.php');
 
 /* CurrentScore returns the total score of a player at any given time.
@@ -243,7 +245,7 @@
     $name1 = $names[0];
     $name2 = $names[1];
 
-    $db = sqlite_open($database_file);
+    db_open();
     $winner_score = 7;
   
     if ($score1 >= 7) {
@@ -274,8 +276,8 @@
 
 #    $query = "insert into game values(null, $loser,$winner,$loser_score,$winner_score,datetime('now'))";
     $query = "insert into game values(null, $loser,$winner,$loser_score,$winner_score,'$winner_ball1','$winner_ball2','$loser_ball1','$loser_ball2', datetime('now'))";
-    $result = sqlite_query($db,$query);
-    $game_id = sqlite_last_insert_rowid($db);
+    $result = db_query($query);
+    $game_id = db_last_insert_rowid();
     
     //maybe cut this down to one long transaction
     for ($round = 0; $round < count($winner_history); $round++) {
@@ -288,7 +290,7 @@
       }
       $roundnumber = $round + 1;
       $query = "insert into point values(null, $game_id, $roundnumber, $scorer, $amount)";
-      $result = sqlite_query($db, $query);
+      $result = db_query($query);
     }
     
     //store bruises in database
@@ -298,10 +300,10 @@
       $success = $bruise[2];
 
       $query = "insert into bruise values(null, $game_id, $roundnum, $player, $success)";
-      $result = sqlite_query($db, $query);
+      $result = db_query($query);
     }
 
-    sqlite_close($db);
+    db_close();
     
 require("header.php");
 require("side.php");
Index: db.php
===================================================================
--- db.php	(revision 0)
+++ db.php	(revision 0)
@@ -0,0 +1,6 @@
+<?
+require "vardefs.php";
+
+require_once "db_$dbengine.php";
+
+?>
Index: startgame.php
===================================================================
--- startgame.php	(revision 3)
+++ startgame.php	(working copy)
@@ -2,6 +2,7 @@
 /*
  * Copyright (C) 2004, 2005 Mark Drago
  *           (C) 2004 Tom Melendez
+ *           (C) 2005 Josef "Jeff" Sipek <jeffpc@optonline.net>
  *
  *This program is free software; you can redistribute it and/or modify
  *it under the terms of the GNU General Public License as published by
@@ -19,6 +20,7 @@
  */
 
 session_start();
+require('db.php');
 require('boccelib.php');
 
 $uname = "";
@@ -59,12 +61,12 @@
   }
 
   if ($notice == "") {
-    $db = sqlite_open($database_file);
+    db_open();
     $md5pass = md5($pass);
     $query = "select id from player where username='$uname' and password='$md5pass'";
-    $result = sqlite_query($db,$query);
+    $result = db_query($query);
 
-    if ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+    if ($row = db_fetch_array($result)) {
       $_SESSION[$player] = $row['id'];
       $_SESSION[$player."_ball1"]=$_POST['ball1'];
       $_SESSION[$player."_ball2"]=$_POST['ball2'];
@@ -75,7 +77,7 @@
     } else {
       $notice = "The user name and password that you entered are not correct.<br />Either the user name doesn't exist or you mistyped the password.";
     }
-    sqlite_close($db);
+    db_close();
   }
 
   if (isset($_SESSION["player1"]) and isset($_SESSION["player2"])) {
@@ -118,15 +120,15 @@
     <div class="label">
       <div>Ball Color:</div>
 <?
-$db = sqlite_open($database_file);
+db_open();
 
 $query = "select id,num, color from ball order by color";
-$result = sqlite_query($db,$query);
+$result = db_query($query);
 
 $balls1 = array();
 $balls2 = array();
 
-while ($row = sqlite_fetch_array($result,SQLITE_ASSOC)) {
+while ($row = db_fetch_array($result)) {
   if ($row['num'] == 1) {
     $balls1[$row['id']] = $row['color'];
   } else {
